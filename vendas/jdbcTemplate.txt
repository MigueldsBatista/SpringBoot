package domain.repository;
import domain.entity.Cliente;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;


@Repository
public class Clientes {

    private static String INSERT ="INSERT INTO CLIENTE (NOME) VALUES (?);";//nosso metodo de inserçaõ na base de dados
    private static String SELECT_ALL ="SELECT * FROM CLIENTE";
    private static String UPDATE = "UPDATE CLIENTE SET NOME = ? WHERE ID = ?;";
    private static String DELETE ="DELETE FROM CLIENTE WHERE ID=?;";
    @Autowired
    private JdbcTemplate jdbcTemplate;//template que ja vem con a conexao com o db

    //SEGUNDO parametro é um roll mapper 
    public List<Cliente> buscarPorNome(String nome) {
        String SEARCH = SELECT_ALL + " WHERE NOME LIKE ?";
    
        return jdbcTemplate.query(
            SEARCH,  
            
            (PreparedStatementSetter) ps -> ps.setString(1, "%" + nome + "%"),  
            obterClientMapper()
        );
    }
    


    public void deleter(Cliente cliente){ //metodo void pois so precisamos deletar
        deletar(cliente.getId());
    }
        public void deletar(Integer id){
                jdbcTemplate.update(DELETE, new Object[]{id});//vai ser o id que é passado pelo outro metodo que chama cliente
    }

    public Cliente salvar(Cliente cliente){
        jdbcTemplate.update(INSERT, new Object[]{cliente.getNome()});
        return cliente;
    }

    public Cliente atualizar(Cliente cliente){
        jdbcTemplate.update(UPDATE, cliente.getNome(), cliente.getId());

        return cliente;     // Retornar o cliente atualizado
    }


    public List<Cliente> obterTodos(){
       return jdbcTemplate.query(SELECT_ALL, obterClientMapper());
    }

    //mapea o resultado do banco de dados para uma classe (Row Mapper)
    private RowMapper<Cliente> obterClientMapper() {
        return new RowMapper<Cliente>() {
                @Override
                public Cliente mapRow(ResultSet resultSet, int i) throws SQLException{
                    String nome = resultSet.getString("NOME");
                    Integer id=resultSet.getInt("ID");
                    return new Cliente(id, nome);//vai pegar do nosso resultado a coluna nome

                }
            };
    }

}
